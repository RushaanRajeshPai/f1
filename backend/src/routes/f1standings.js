const express = require('express');
const router = express.Router();
const fs = require('fs');
const path = require('path');
const { spawn } = require('child_process');

// Route to get F1 standings
router.get('/standings', async (req, res) => {
  try {
    // Path to the Python script
    const pythonScriptPath = path.join(__dirname, '..', 'standings.py');
    // Path to the JSON file that will be generated by the Python script
    const dataPath = path.join(__dirname, '..', 'f1_standings.json');
    
    // Check if we have fresh data (less than 1 hour old)
    try {
      const stats = fs.statSync(dataPath);
      const fileAge = (new Date() - stats.mtime) / 1000 / 60; // Age in minutes
      
      // If file exists and is less than 60 minutes old, return cached data
      if (fileAge < 60) {
        const data = JSON.parse(fs.readFileSync(dataPath, 'utf8'));
        return res.json(data);
      }
    } catch (err) {
      // File doesn't exist or other error, we'll generate new data
    }
    
    // Run Python script to get fresh data
    const pythonProcess = spawn('python', [pythonScriptPath]);
    
    pythonProcess.on('close', (code) => {
      if (code !== 0) {
        return res.status(500).json({ error: 'Failed to retrieve F1 standings data' });
      }
      
      // Read the generated JSON file
      try {
        const data = JSON.parse(fs.readFileSync(dataPath, 'utf8'));
        res.json(data);
      } catch (error) {
        res.status(500).json({ error: 'Failed to parse F1 standings data' });
      }
    });
    
    pythonProcess.stderr.on('data', (data) => {
      console.error(`Python script error: ${data}`);
    });
    
  } catch (error) {
    console.error('Error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

module.exports = router;